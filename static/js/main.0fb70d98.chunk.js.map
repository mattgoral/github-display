{"version":3,"sources":["api/github-api.js","components/Loading.js","components/Organizations.js","components/Repositories.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","_callee","username","url","regenerator_default","a","wrap","_context","prev","next","concat","axios","get","then","response","data","abrupt","sent","stop","this","Loading","react_default","createElement","className","index_es","icon","size","pulse","Component","Organizations","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loading","orgs","components_Loading","userData","length","map","org","key","id","login","Repositories","repos","repoData","repo","name","title","open_issues","forks","watchers","description","library","add","faSearch","faSpinner","faCodeBranch","faStar","faInfoCircle","App","_this","state","user","reposLoading","userDataLoading","didSearch","error","inputChangeHandler","bind","assertThisInitialized","getGithubData","event","setState","defineProperty","target","value","_this2","preventDefault","console","log","getRepos","repoDataRes","catch","all","_ref","_ref2","slicedToArray","userDataRes","content","status","statusText","components_Organizations","components_Repositories","onChange","placeholder","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fb70d98.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Documentation is at https://developer.github.com/v3/\nconst BASE_URL = \"https://api.github.com\";\n\nexport { getRepos, getUserData };\n\nasync function getRepos(username) {\n  const url = `${BASE_URL}/users/${username}/repos?per_page=250`;\n  return await axios.get(url).then(response => response.data);\n}\n\nfunction getUserData(username) {\n  return axios\n    .all([\n      axios.get(`${BASE_URL}/users/${username}`),\n      axios.get(`${BASE_URL}/users/${username}/orgs`)\n    ])\n    .then(([user, orgs]) => ({\n      user: user.data,\n      orgs: orgs.data\n    }));\n}\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">\n        <FontAwesomeIcon icon=\"spinner\" size=\"4x\" pulse />\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport Loading from '../components/Loading';\n\nclass Organizations extends Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    let loading;\n    if(this.props.loading) loading = <Loading />;\n\n    let orgs;\n    if(this.props.userData && this.props.userData.orgs && this.props.userData.orgs.length > 0) {\n      orgs = this.props.userData.orgs.map(org => {\n        return (\n          <div key={org.id}>\n            <p>{org.login}</p>\n          </div>\n        )\n      });\n    } else {\n      orgs = <p className=\"text-muted no-data\">(No Organizations)</p>\n    };\n\n    return (\n      <div className=\"organizations-container col-sm-3\">\n        <h5 className=\"col-header\">Organizations</h5>\n        { loading }\n        { orgs }\n      </div>\n    );\n  }\n}\n\nexport default Organizations;\n","import React, { Component } from 'react';\nimport Loading from '../components/Loading';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Repositories extends Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    let loading;\n    if(this.props.loading) loading = <Loading />;\n\n    let repos;\n    if(this.props.repoData && this.props.repoData.length > 0) {\n      repos = this.props.repoData.map(repo => {\n        return (\n          <div className=\"card\" key={repo.id}>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">\n                {repo.name}\n                <small className=\"float-right\" title=\"Open Issues\">\n                  <FontAwesomeIcon icon=\"info-circle\" />\n                  {repo.open_issues}\n                </small>\n                <small className=\"float-right\" title=\"Forks\">\n                  <FontAwesomeIcon icon=\"code-branch\" />\n                  {repo.forks}\n                </small>\n                <small className=\"float-right\" title=\"Watchers\">\n                  <FontAwesomeIcon icon=\"star\" />\n                  {repo.watchers}\n                </small>\n              </h5>\n              <p className=\"card-text\">{repo.description}</p>\n            </div>\n          </div>\n        )\n      });\n    } else {\n      repos = <p className=\"text-muted no-data\">(No Repositories)</p>\n    };\n\n    return (\n      <div className=\"repositories-container col-sm-9\">\n        <h5 className=\"col-header\">Repositories</h5>\n        { loading }\n        { repos }\n      </div>\n    );\n  }\n}\n\nexport default Repositories;\n","import React, { Component } from 'react';\nimport { getRepos, getUserData } from './api/github-api';\nimport Organizations from './components/Organizations';\nimport Repositories from './components/Repositories';\nimport './App.scss';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner, faCodeBranch, faStar, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faSearch, faSpinner, faCodeBranch, faStar, faInfoCircle);\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      user: '',\n      repos: [],\n      reposLoading: false,\n      userData: {},\n      userDataLoading: false,\n      didSearch: false,\n      error: false\n    };\n    this.inputChangeHandler = this.inputChangeHandler.bind(this);\n    this.getGithubData = this.getGithubData.bind(this);\n  }\n\n  inputChangeHandler(event) {\n    this.setState({ [event.target.id]: event.target.value });\n  }\n\n  getGithubData(event) {\n    event.preventDefault();\n    console.log('GET REPO DATA');\n    this.setState({\n      reposLoading: true,\n      userDataLoading: true,\n      didSearch: true,\n      error: false\n    });\n    getRepos(this.state.user)\n    .then(repoDataRes => {\n      console.log('Repos', repoDataRes);\n      this.setState({\n        repos: repoDataRes,\n        reposLoading: false\n      });\n    })\n    .catch(error => {\n      this.setState({ error: error.response });\n    });\n    getUserData(this.state.user).then(userDataRes => {\n      console.log('User Data', userDataRes);\n      this.setState({\n        userData: userDataRes,\n        userDataLoading: false\n      });\n    })\n    .catch(error => {\n      this.setState({ error: error.response });\n      console.log(error.response)\n    });\n  }\n\n  render() {\n    let content;\n    if(this.state.error) {\n      content = (\n        <div id=\"content\" className=\"error\">\n          <h3>{ this.state.error.status }</h3>\n          <h4>{ this.state.error.statusText }</h4>\n        </div>\n      )\n    } else if(this.state.didSearch) {\n      content = (\n        <div id=\"content\" className=\"row\">\n          <Organizations userData={this.state.userData} loading={this.state.userDataLoading} />\n          <Repositories repoData={this.state.repos} loading={this.state.reposLoading} />\n        </div>\n      )\n    } else {\n      content = (\n        <div id=\"content\" className=\"row\">\n          <h3 className=\"search-message\">Please enter a GitHub user above.</h3>\n        </div>\n      )\n    }\n    return (\n      <div id=\"App\" className=\"container-fluid\">\n        <header>\n          <div className=\"app-title\">GitHub Display</div>\n          <form className=\"form-inline\" id=\"user-form\">\n            <div className=\"input-group\">\n              <input className=\"form-control\"\n                     id=\"user\"\n                     onChange={this.inputChangeHandler}\n                     placeholder=\"Username\"\n                     type=\"text\"\n                     value={this.state.user}/>\n            <div className=\"input-group-append\">\n                <button className=\"btn btn-primary\"\n                        onClick={this.getGithubData}\n                        type=\"submit\">\n                  <FontAwesomeIcon icon=\"search\" />\n                </button>\n              </div>\n            </div>\n          </form>\n        </header>\n        { content }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}